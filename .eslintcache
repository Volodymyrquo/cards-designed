[{"/home/workstation723/Desktop/infinity-ulta-cards/src/index.js":"1","/home/workstation723/Desktop/infinity-ulta-cards/src/reportWebVitals.js":"2","/home/workstation723/Desktop/infinity-ulta-cards/src/common/functions.js":"3","/home/workstation723/Desktop/infinity-ulta-cards/src/redux/store.js":"4","/home/workstation723/Desktop/infinity-ulta-cards/src/redux/auth-reducer.js":"5","/home/workstation723/Desktop/infinity-ulta-cards/src/App.jsx":"6","/home/workstation723/Desktop/infinity-ulta-cards/src/components/Auth/AuthPage.js":"7","/home/workstation723/Desktop/infinity-ulta-cards/src/components/Auth/ConfirmForm.js":"8","/home/workstation723/Desktop/infinity-ulta-cards/src/components/Auth/UserForm.js":"9","/home/workstation723/Desktop/infinity-ulta-cards/src/components/Auth/LoginForm.js":"10","/home/workstation723/Desktop/infinity-ulta-cards/src/components/Auth/FirstForm.js":"11","/home/workstation723/Desktop/infinity-ulta-cards/src/components/index.js":"12","/home/workstation723/Desktop/infinity-ulta-cards/src/components/Cards/Cards.jsx":"13","/home/workstation723/Desktop/infinity-ulta-cards/src/components/Currencies/Currencies.jsx":"14","/home/workstation723/Desktop/infinity-ulta-cards/src/components/Contacts/Contacts.jsx":"15","/home/workstation723/Desktop/infinity-ulta-cards/src/components/Requisites/Requisites.jsx":"16","/home/workstation723/Desktop/infinity-ulta-cards/src/components/Dashboard/Dashboard.jsx":"17","/home/workstation723/Desktop/infinity-ulta-cards/src/components/Home/Home.jsx":"18","/home/workstation723/Desktop/infinity-ulta-cards/src/components/Tariffs/Tariffs.jsx":"19","/home/workstation723/Desktop/infinity-ulta-cards/src/components/Users/Users.jsx":"20","/home/workstation723/Desktop/infinity-ulta-cards/src/components/Operations/Operations.jsx":"21"},{"size":412,"mtime":1612437577164,"results":"22","hashOfConfig":"23"},{"size":362,"mtime":1612266657786,"results":"24","hashOfConfig":"23"},{"size":1636,"mtime":1612354342189,"results":"25","hashOfConfig":"23"},{"size":465,"mtime":1612425870902,"results":"26","hashOfConfig":"23"},{"size":909,"mtime":1612432821427,"results":"27","hashOfConfig":"23"},{"size":213,"mtime":1612439071268,"results":"28","hashOfConfig":"23"},{"size":1813,"mtime":1612434188025,"results":"29","hashOfConfig":"23"},{"size":2706,"mtime":1612434207309,"results":"30","hashOfConfig":"23"},{"size":3613,"mtime":1612434561054,"results":"31","hashOfConfig":"23"},{"size":3234,"mtime":1612435686994,"results":"32","hashOfConfig":"23"},{"size":5402,"mtime":1612434459612,"results":"33","hashOfConfig":"23"},{"size":540,"mtime":1612440085890,"results":"34","hashOfConfig":"23"},{"size":148,"mtime":1612435687010,"results":"35","hashOfConfig":"23"},{"size":163,"mtime":1612436140614,"results":"36","hashOfConfig":"23"},{"size":157,"mtime":1612436140614,"results":"37","hashOfConfig":"23"},{"size":163,"mtime":1612436347046,"results":"38","hashOfConfig":"23"},{"size":160,"mtime":1612436140582,"results":"39","hashOfConfig":"23"},{"size":146,"mtime":1612436140614,"results":"40","hashOfConfig":"23"},{"size":154,"mtime":1612436347042,"results":"41","hashOfConfig":"23"},{"size":148,"mtime":1612436377661,"results":"42","hashOfConfig":"23"},{"size":163,"mtime":1612436140582,"results":"43","hashOfConfig":"23"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"ml6bgz",{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"52"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"52"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64","usedDeprecatedRules":"52"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"52"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/workstation723/Desktop/infinity-ulta-cards/src/index.js",[],"/home/workstation723/Desktop/infinity-ulta-cards/src/reportWebVitals.js",[],["92","93"],"/home/workstation723/Desktop/infinity-ulta-cards/src/common/functions.js",["94"],"/**\n * Const adrees server and points for request\n */\nexport const END_POINTS = {\n  SERVER: 'https://api.sumra.net/',\n  SEND_CODE: 'auth/v1/send-code',\n  VALIDATE: 'auth/v1/validate',\n  REGISTRATION: 'auth/v1/registration',\n  AUTHENTIFICATION: 'auth/v1/meet/authenticate',\n};\n\n/**\n * makeId.\n */\n\nexport function makeid(length: number): string {\n  var result = '';\n  var characters =\n    'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n  var charactersLength = characters.length;\n  for (var i = 0; i < length; i++) {\n    result += characters.charAt(Math.floor(Math.random() * charactersLength));\n  }\n  return result;\n}\n\n/**\n * type Data\n */\ntype Data = {\n  /**\n   * Phone number.\n   */\n  phone_number?: string,\n\n  /**\n   * Device identyficator.\n   */\n  device_id: string,\n\n  /**\n   * User name.\n   */\n  username: string,\n\n  /**\n   * Verification code.\n   */\n  code: string,\n\n  /**\n   * Password.\n   */\n  password: string,\n};\n\n/**\n * makeFetch.\n */\nexport async function makeFetch(action, data /* : Data */): Promise<*> {\n  return fetch(END_POINTS.SERVER + action, {\n    body: JSON.stringify(data),\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n  });\n}\n\n/**\n * makeFetch.\n */\nexport function fetchValidateName(name): Promise<*> {\n  return fetch(END_POINTS.SERVER + END_POINTS.VALIDATE + '?username=' + name);\n}\n\n/**\n * fetchAuth\n */\nexport function fetchAuth(data) {\n  return fetch(END_POINTS.SERVER + END_POINTS.AUTHENTIFICATION, {\n    body: JSON.stringify(data),\n    method: 'POST',\n    // mode: 'no-cors',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n  });\n}\n",["95","96"],"/home/workstation723/Desktop/infinity-ulta-cards/src/redux/store.js",[],"/home/workstation723/Desktop/infinity-ulta-cards/src/redux/auth-reducer.js",["97","98","99","100"],"import { fetchAuth } from '../common/functions';\n\nconst SET_USER_ACCESS_TOKEN = 'ulta-cards/auth/SET_USER_ACCESS_TOKEN';\n\nconst initialState = {\n  accessToken: null,\n};\n\nconst authReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case SET_USER_ACCESS_TOKEN:\n      return {\n        ...state,\n        accessToken: action.accessToken,\n      };\n    default:\n      return state;\n  }\n};\n\nexport const setUserAccessToken = (access) => ({\n  type: SET_USER_ACCESS_TOKEN,\n  accessToken: access,\n});\nexport const _signIn = ({ username, password }) => (dispatch) => {\n  fetchAuth({ username, password })\n    .then((response) => response.json())\n    .then((result) => {\n      const {\n        access_token,\n        meet_token,\n        expires_in,\n        refresh_token,\n        token_type,\n      } = result;\n      dispatch(setUserAccessToken(access_token));\n    });\n};\n\nexport default authReducer;\n","/home/workstation723/Desktop/infinity-ulta-cards/src/App.jsx",[],"/home/workstation723/Desktop/infinity-ulta-cards/src/components/Auth/AuthPage.js",[],"/home/workstation723/Desktop/infinity-ulta-cards/src/components/Auth/ConfirmForm.js",["101"],"import React, { Component, createRef } from 'react';\nimport ReactCodeInput from 'react-verification-code-input';\nimport logout from '../../images/sumra/icon-logout.svg';\ntype Props = {\n  /**\n   * Function to step on click.\n   */\n  onStep: Function,\n\n  /**\n   * Function set Verification code to upper state\n   */\n  onSetCode: Function,\n};\n\ntype State = {\n  verificationCode: String,\n};\n\nexport class ConfirmForm extends Component<Props, State> {\n  static defaultProps = {\n    autoFocus: true,\n    fieldWidth: 38,\n    fieldHeight: 44,\n    type: 'text',\n    fields: 6,\n  };\n\n  /**\n   * Initializes a new {@code ConfirmForm} instance.\n   *\n   * @param {Props} props - The React {@code Component} props to initialize\n   * the new {@code ConfirmForm} instance with.\n   */\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      verificationCode: '',\n    };\n\n    this.input = createRef();\n  }\n\n  /**\n   * Render\n   *\n   * @private\n   * @returns {void}\n   */\n  render() {\n    const { type, fieldWidth, fieldHeight, fields } = this.props;\n\n    let { className } = this.props;\n\n    className += ' verification-code-form';\n\n    return (\n      <div className={className}>\n        <h1 className='h1-title'>Confirmation Access</h1>\n\n        <form>\n          <h2 className='h2-label'>Enter the six-digit verification code.</h2>\n\n          <ReactCodeInput\n            className='sumra-react-code-input'\n            ref={this.input}\n            type={type}\n            fieldWidth={fieldWidth}\n            fieldHeight={fieldHeight}\n            onChange={this._handleChange}\n            onComplete={this._handleComplete}\n          />\n\n          <button\n            className='sumra-Button'\n            onClick={this._submitVerificationCode}>\n            <img\n              className='sumra-Button-icon-left'\n              src={logout}\n              width='18'\n              alt='logout'\n            />\n\n            <span>Continue</span>\n          </button>\n        </form>\n      </div>\n    );\n  }\n\n  /**\n   * Submit verification code.\n   *\n   * @param {Event} event - The HTML Event which details the form submission.\n   * @protected\n   * @returns {void}\n   */\n  _submitVerificationCode = (event) => {\n    event.preventDefault();\n\n    const { verificationCode } = this.state;\n    const { fields } = this.props;\n    const isComplete = verificationCode.length === fields;\n\n    if (isComplete) {\n      this.props.onSetCode(verificationCode);\n      this.props.onStep(3);\n    }\n  };\n\n  /**\n   * _handleChange\n   */\n  _handleChange = (vals) => {\n    console.log('handleChange: ' + vals);\n  };\n\n  /**\n   * _handleComplete\n   */\n  _handleComplete = (verificationCode) => {\n    this.setState({ verificationCode });\n  };\n}\n","/home/workstation723/Desktop/infinity-ulta-cards/src/components/Auth/UserForm.js",[],"/home/workstation723/Desktop/infinity-ulta-cards/src/components/Auth/LoginForm.js",[],"/home/workstation723/Desktop/infinity-ulta-cards/src/components/Auth/FirstForm.js",["102","103"],"import React, { Component, useState } from 'react';\nimport { makeid, makeFetch, END_POINTS } from '../../common/functions';\nimport { isMobile, isBrowser } from 'react-device-detect';\nimport 'react-phone-number-input/style.css';\nimport PhoneInput from 'react-phone-number-input';\nimport flags from 'react-phone-number-input/flags';\nimport send from '../../images/sumra/send.svg';\nimport user from '../../images/sumra/user.svg';\nimport benefits from '../../images/sumra/Benefits_draft.svg';\nimport Telegram from '../../images/sumra/Telegram.svg';\nimport Viber from '../../images/sumra/Viber.svg';\nimport Messanger from '../../images/sumra/Messanger.svg';\nimport WhatsApp from '../../images/sumra/WhatsApp.svg';\nimport Signal from '../../images/sumra/Signal.svg';\n\ntype Props = {\n  /**\n   * Function to step on click.\n   */\n  onStep: Function,\n\n  /**\n   * className\n   */\n  className: String,\n};\n\ntype State = {\n  /**\n   * Phone number\n   *\n   */\n  phone: string,\n};\n\nexport class FirstForm extends Component<Props, State> {\n  static defaultProps = {\n    targetBlank: '_blank',\n    socialLinkWidth: 46,\n    socialLinks: [\n      {\n        image: Telegram,\n        href: 'https://t.me/sumrabot',\n        hrefMobile: 'tg://resolve?domain=SumraBot',\n      },\n      {\n        image: Viber,\n        href: 'viber://pa?ChatURI=SumraBot',\n        hrefMobile: 'viber://pa?ChatURI=SumraBot',\n      },\n      {\n        image: Messanger,\n        href: 'https://m.me/SumraBot',\n        hrefMobile: 'https://m.me/SumraBot',\n      },\n      {\n        image: WhatsApp,\n        href: 'https://wa.me/SumraBot',\n        hrefMobile: 'https://wa.me/SumraBot',\n      },\n      {\n        image: Signal,\n        href: '#',\n        hrefMobile: '#',\n      },\n    ],\n  };\n\n  /**\n   * Initializes a new {@code FirstForm} instance.\n   *\n   * @param {Props} props - The React {@code Component} props to initialize\n   * the new {@code FirstForm} instance with.\n   */\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      phone: '',\n    };\n  }\n\n  /**\n   * Render\n   *\n   * @private\n   * @returns {void}\n   */\n  render() {\n    const { className, socialLinks, socialLinkWidth, targetBlank } = this.props;\n\n    const links = socialLinks.map((v, index) => {\n      let href = '';\n      if (isMobile) {\n        href = v.hrefMobile;\n      } else {\n        href = v.href;\n      }\n      console.log(href);\n      return (\n        <li key={index} onClick={this._goToVeryfycationCodePage}>\n          <a href={href} target={targetBlank}>\n            <img src={v.image} width={socialLinkWidth} alt='social links' />\n          </a>\n        </li>\n      );\n    });\n\n    return (\n      <div className={className}>\n        <h1 className='h1-title'>Wellcome to Sumra Chat</h1>\n        <h2 className='h2-subtitle'>Please Login or Sign Up</h2>\n        <section>\n          <h3 className='h3-label'>Sign up with:</h3>\n\n          <ul className='sumra-social-links'>{links}</ul>\n        </section>\n        <div className='sumra-line'></div>\n        <section>\n          <h3 className='h3-label'>Sign up with:</h3>\n          <form>\n            <fieldset className='sumra-phone-fieldset'>\n              <legend>Your mobile phone number</legend>\n\n              <PhoneInput\n                flags={flags}\n                placeholder='Enter phone number'\n                value={this.state.phone}\n                onChange={this._changePhoneNumber}\n              />\n\n              <div\n                className='sumra-phone-send'\n                onClick={this._submitPhoneNumber}>\n                <img src={send} alt='send' />\n              </div>\n            </fieldset>\n          </form>\n        </section>\n        <div className='sumra-line'></div>\n        <div className='sumra-Button' onClick={this._goToLoginPage}>\n          <img src={user} width='14' height='17' alt='user' />\n          <span>Login with Sumra ID</span>\n        </div>\n\n        {/* <section class = 'sumra-Benefits'>\n                    <div className = 'sumra-Benefit-text'>\n                        <b>Earn Unlimited</b> DIVITS for your time and activities on <b>Sumra Chat</b> \n                    </div>\n                    <div className = 'sumra-Benefit-text'>\n                        <b>Exchange & Redeem</b> DIVITS.\n                    </div>\n                </section> */}\n        <img className='sumra-Benefits-draft' src={benefits} alt='benefits' />\n      </div>\n    );\n  }\n\n  /**\n   * Set state after changed phone number.\n   *\n   * @param {String} phone - The HTML Event which details the form submission.\n   * @private\n   * @returns {void}\n   */\n  _changePhoneNumber = (phone) => {\n    this.setState({ phone });\n  };\n\n  /**\n   * _goToLoginPage\n   */\n  _goToLoginPage = () => {\n    this.props.onStep(4);\n  };\n\n  /**\n   * _goToVeryfycationCodePage\n   */\n  _goToVeryfycationCodePage = () => {\n    this.props.onStep(2);\n  };\n\n  /**\n   * Submit form value (phone number).\n   *\n   * @param {Event} event - The HTML Event which details the form submission.\n   * @private\n   * @returns {void}\n   */\n  _submitPhoneNumber = (event) => {\n    event.preventDefault();\n\n    let { phone } = this.state;\n\n    if (!phone) {\n      return;\n    }\n\n    phone = phone.replace('+', '');\n\n    makeFetch(END_POINTS.SEND_CODE, {\n      phone_number: phone,\n      device_id: makeid(20),\n    }).then(\n      (response) => console.log,\n      (error) => console.error\n    );\n    this.props.onStep(2);\n  };\n}\n","/home/workstation723/Desktop/infinity-ulta-cards/src/components/index.js",[],"/home/workstation723/Desktop/infinity-ulta-cards/src/components/Cards/Cards.jsx",[],"/home/workstation723/Desktop/infinity-ulta-cards/src/components/Currencies/Currencies.jsx",[],"/home/workstation723/Desktop/infinity-ulta-cards/src/components/Contacts/Contacts.jsx",[],"/home/workstation723/Desktop/infinity-ulta-cards/src/components/Requisites/Requisites.jsx",[],"/home/workstation723/Desktop/infinity-ulta-cards/src/components/Dashboard/Dashboard.jsx",[],"/home/workstation723/Desktop/infinity-ulta-cards/src/components/Home/Home.jsx",[],"/home/workstation723/Desktop/infinity-ulta-cards/src/components/Tariffs/Tariffs.jsx",[],"/home/workstation723/Desktop/infinity-ulta-cards/src/components/Users/Users.jsx",[],"/home/workstation723/Desktop/infinity-ulta-cards/src/components/Operations/Operations.jsx",[],{"ruleId":"104","replacedBy":"105"},{"ruleId":"106","replacedBy":"107"},{"ruleId":"108","severity":1,"message":"109","line":30,"column":6,"nodeType":"110","messageId":"111","endLine":30,"endColumn":10},{"ruleId":"104","replacedBy":"112"},{"ruleId":"106","replacedBy":"113"},{"ruleId":"108","severity":1,"message":"114","line":31,"column":9,"nodeType":"110","messageId":"111","endLine":31,"endColumn":19},{"ruleId":"108","severity":1,"message":"115","line":32,"column":9,"nodeType":"110","messageId":"111","endLine":32,"endColumn":19},{"ruleId":"108","severity":1,"message":"116","line":33,"column":9,"nodeType":"110","messageId":"111","endLine":33,"endColumn":22},{"ruleId":"108","severity":1,"message":"117","line":34,"column":9,"nodeType":"110","messageId":"111","endLine":34,"endColumn":19},{"ruleId":"108","severity":1,"message":"118","line":52,"column":44,"nodeType":"110","messageId":"111","endLine":52,"endColumn":50},{"ruleId":"108","severity":1,"message":"119","line":1,"column":28,"nodeType":"110","messageId":"111","endLine":1,"endColumn":36},{"ruleId":"108","severity":1,"message":"120","line":3,"column":20,"nodeType":"110","messageId":"111","endLine":3,"endColumn":29},"no-native-reassign",["121"],"no-negated-in-lhs",["122"],"no-unused-vars","'Data' is defined but never used.","Identifier","unusedVar",["121"],["122"],"'meet_token' is assigned a value but never used.","'expires_in' is assigned a value but never used.","'refresh_token' is assigned a value but never used.","'token_type' is assigned a value but never used.","'fields' is assigned a value but never used.","'useState' is defined but never used.","'isBrowser' is defined but never used.","no-global-assign","no-unsafe-negation"]